buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        if (rootProject.ext.has("gradle_classpath")) {
            classpath rootProject.ext.gradle_classpath
        } else {
            logger.warn('classpath not found in rootProject')
            classpath 'com.android.tools.build:gradle:3.0.1'
            classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        }
    }
}

apply plugin: 'com.android.library'

version = "1.1"

android {

    if (rootProject.ext.has("compileSdkVersion")) {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion
    } else {
        logger.warn('compileSdkVersion not found in rootProject')
        compileSdkVersion = 33
        buildToolsVersion = "33.0.0"
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
        debug {
            minifyEnabled false
        }
    }

    if (System.getenv("TRAVIS")) {
        lintOptions {
            ignoreWarnings true
            abortOnError false
        }
    }

    defaultConfig {
        minSdkVersion 14
    }
    namespace 'de.j4velin.picturechooser'
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    // You must install or update the Support Repository through the SDK manager to use this dependency.
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.7'
}


def libName = 'PictureChooser'
def siteUrl = 'https://github.com/j4velin/PictureChooser'      // Homepage URL of the library
def gitUrl = 'https://github.com/j4velin/PictureChooser.git'   // Git repository URL
group = "com.github.j4velin.PictureChooser"                    // Maven Group ID for the artifact

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    //classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    //classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
